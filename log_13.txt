* Rewrote 32x32: changed the loop variables to correspond to navie code and 
removed temp variables to make more clear what is going on. I realized that 
I had a great reuse of A but C was loaded/stored N times and I should unroll
that to increase temporal locality. This means reading sevral A value and 
computing A[1][1]*B[1][1]+A[1][2]*B[2][1] vs just A[1][1]*B[1][1] as long as
unroll factor is small and I don't evic thing from $ this will be better 
because it resudes number of load/stores
* May UNROLL as a define to experiment easier
* UNROLL=4 gives 6500MOPS
* For 32x32 we used to have 19980 loads and 18503 stores with the new code 
we get 21516/4103

* Added the same unroll strategy to general blocking code and changed the
CACHE_LINE parametter to 32 wich is effectively blocking parammeter now
* For N > 64 UNROLL=8 seems to be best while for N=32&64 UNROLL=8 is better

*Added unroll strategy to 32x32 strided kernel of Strassen

*Fixed 32x32 kernel for Strassen

*Chnaged loop order in blockin function now mid sized matrices are decent

*Made dedicated functions for 64,128,256 based on matmul_blocking. This gives
compiler a change to do better optimizations becase loop bound is fixed

 0x80000032 = PAPI_TOT_INS	Instr completed
 0x8000003b = PAPI_TOT_CYC	Total cycles
 0x80000000 = PAPI_L1_DCM	L1D cache misses
 0x80000007 = PAPI_L2_TCM	L2 cache misses

Dim.   MFLOPS     Runtime      0x80000032   0x8000003b   0x80000000   0x80000007
   2 1776.479      0.0000              44           21            0            0
   4 4355.146      0.0000             174           68            0            0
   8 4630.813      0.0002            1150          514            0            0
  16 5401.151      0.0015            8999         3513            0            0
  32 6506.142      0.0101           55409        23339           12            0
  64 6829.640      0.0768          422298       178403         3218            4
 128 6361.435      0.6593         3377743      1531282        42827          157
 256 5853.552      5.7323        27020874     13213013       520742        11874
 512 3968.558     67.6405       247304262    156273799     11218562       367566
1024 2796.028    768.0480      1670374141   1818665921     44486567      7726695
2048 3344.781   5136.3210     11772295550  11994716200    319344958     65959302

